{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled15.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMBzKv4oySv9ICbEb876+O4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SreeramNithin/GRIP-TASKS/blob/main/Capstone%20Project%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DeGVmUZxyHWB"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "import sklearn"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=pd.read_csv(\"/content/garments_worker_productivity.csv\")"
      ],
      "metadata": {
        "id": "9yVUpudVyPgs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "SrAPU-Nm85-0",
        "outputId": "dad507a8-e751-47bd-a71a-aac3dae7ed53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           date   quarter  department        day  team  targeted_productivity  \\\n",
              "0      1/1/2015  Quarter1      sweing   Thursday     8                   0.80   \n",
              "1      1/1/2015  Quarter1  finishing    Thursday     1                   0.75   \n",
              "2      1/1/2015  Quarter1      sweing   Thursday    11                   0.80   \n",
              "3      1/1/2015  Quarter1      sweing   Thursday    12                   0.80   \n",
              "4      1/1/2015  Quarter1      sweing   Thursday     6                   0.80   \n",
              "...         ...       ...         ...        ...   ...                    ...   \n",
              "1192  3/11/2015  Quarter2   finishing  Wednesday    10                   0.75   \n",
              "1193  3/11/2015  Quarter2   finishing  Wednesday     8                   0.70   \n",
              "1194  3/11/2015  Quarter2   finishing  Wednesday     7                   0.65   \n",
              "1195  3/11/2015  Quarter2   finishing  Wednesday     9                   0.75   \n",
              "1196  3/11/2015  Quarter2   finishing  Wednesday     6                   0.70   \n",
              "\n",
              "        smv     wip  over_time  incentive  idle_time  idle_men  \\\n",
              "0     26.16  1108.0       7080         98        0.0         0   \n",
              "1      3.94     NaN        960          0        0.0         0   \n",
              "2     11.41   968.0       3660         50        0.0         0   \n",
              "3     11.41   968.0       3660         50        0.0         0   \n",
              "4     25.90  1170.0       1920         50        0.0         0   \n",
              "...     ...     ...        ...        ...        ...       ...   \n",
              "1192   2.90     NaN        960          0        0.0         0   \n",
              "1193   3.90     NaN        960          0        0.0         0   \n",
              "1194   3.90     NaN        960          0        0.0         0   \n",
              "1195   2.90     NaN       1800          0        0.0         0   \n",
              "1196   2.90     NaN        720          0        0.0         0   \n",
              "\n",
              "      no_of_style_change  no_of_workers  actual_productivity  \n",
              "0                      0           59.0             0.940725  \n",
              "1                      0            8.0             0.886500  \n",
              "2                      0           30.5             0.800570  \n",
              "3                      0           30.5             0.800570  \n",
              "4                      0           56.0             0.800382  \n",
              "...                  ...            ...                  ...  \n",
              "1192                   0            8.0             0.628333  \n",
              "1193                   0            8.0             0.625625  \n",
              "1194                   0            8.0             0.625625  \n",
              "1195                   0           15.0             0.505889  \n",
              "1196                   0            6.0             0.394722  \n",
              "\n",
              "[1197 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-efd2f642-7ab8-4207-a3bd-9c47f586898e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>quarter</th>\n",
              "      <th>department</th>\n",
              "      <th>day</th>\n",
              "      <th>team</th>\n",
              "      <th>targeted_productivity</th>\n",
              "      <th>smv</th>\n",
              "      <th>wip</th>\n",
              "      <th>over_time</th>\n",
              "      <th>incentive</th>\n",
              "      <th>idle_time</th>\n",
              "      <th>idle_men</th>\n",
              "      <th>no_of_style_change</th>\n",
              "      <th>no_of_workers</th>\n",
              "      <th>actual_productivity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1/1/2015</td>\n",
              "      <td>Quarter1</td>\n",
              "      <td>sweing</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>8</td>\n",
              "      <td>0.80</td>\n",
              "      <td>26.16</td>\n",
              "      <td>1108.0</td>\n",
              "      <td>7080</td>\n",
              "      <td>98</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>0.940725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1/1/2015</td>\n",
              "      <td>Quarter1</td>\n",
              "      <td>finishing</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>1</td>\n",
              "      <td>0.75</td>\n",
              "      <td>3.94</td>\n",
              "      <td>NaN</td>\n",
              "      <td>960</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.886500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1/1/2015</td>\n",
              "      <td>Quarter1</td>\n",
              "      <td>sweing</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>11</td>\n",
              "      <td>0.80</td>\n",
              "      <td>11.41</td>\n",
              "      <td>968.0</td>\n",
              "      <td>3660</td>\n",
              "      <td>50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.5</td>\n",
              "      <td>0.800570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1/1/2015</td>\n",
              "      <td>Quarter1</td>\n",
              "      <td>sweing</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>12</td>\n",
              "      <td>0.80</td>\n",
              "      <td>11.41</td>\n",
              "      <td>968.0</td>\n",
              "      <td>3660</td>\n",
              "      <td>50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.5</td>\n",
              "      <td>0.800570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1/1/2015</td>\n",
              "      <td>Quarter1</td>\n",
              "      <td>sweing</td>\n",
              "      <td>Thursday</td>\n",
              "      <td>6</td>\n",
              "      <td>0.80</td>\n",
              "      <td>25.90</td>\n",
              "      <td>1170.0</td>\n",
              "      <td>1920</td>\n",
              "      <td>50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>0.800382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1192</th>\n",
              "      <td>3/11/2015</td>\n",
              "      <td>Quarter2</td>\n",
              "      <td>finishing</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>10</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2.90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>960</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.628333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1193</th>\n",
              "      <td>3/11/2015</td>\n",
              "      <td>Quarter2</td>\n",
              "      <td>finishing</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>8</td>\n",
              "      <td>0.70</td>\n",
              "      <td>3.90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>960</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.625625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1194</th>\n",
              "      <td>3/11/2015</td>\n",
              "      <td>Quarter2</td>\n",
              "      <td>finishing</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>7</td>\n",
              "      <td>0.65</td>\n",
              "      <td>3.90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>960</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.625625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1195</th>\n",
              "      <td>3/11/2015</td>\n",
              "      <td>Quarter2</td>\n",
              "      <td>finishing</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>9</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2.90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1800</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0.505889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1196</th>\n",
              "      <td>3/11/2015</td>\n",
              "      <td>Quarter2</td>\n",
              "      <td>finishing</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>6</td>\n",
              "      <td>0.70</td>\n",
              "      <td>2.90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>720</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.394722</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1197 rows × 15 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efd2f642-7ab8-4207-a3bd-9c47f586898e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-efd2f642-7ab8-4207-a3bd-9c47f586898e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-efd2f642-7ab8-4207-a3bd-9c47f586898e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k3VeCnjQ88fR",
        "outputId": "ce9f753b-cf17-40f1-a565-0c7e9e54809e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1197 entries, 0 to 1196\n",
            "Data columns (total 15 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   date                   1197 non-null   object \n",
            " 1   quarter                1197 non-null   object \n",
            " 2   department             1197 non-null   object \n",
            " 3   day                    1197 non-null   object \n",
            " 4   team                   1197 non-null   int64  \n",
            " 5   targeted_productivity  1197 non-null   float64\n",
            " 6   smv                    1197 non-null   float64\n",
            " 7   wip                    691 non-null    float64\n",
            " 8   over_time              1197 non-null   int64  \n",
            " 9   incentive              1197 non-null   int64  \n",
            " 10  idle_time              1197 non-null   float64\n",
            " 11  idle_men               1197 non-null   int64  \n",
            " 12  no_of_style_change     1197 non-null   int64  \n",
            " 13  no_of_workers          1197 non-null   float64\n",
            " 14  actual_productivity    1197 non-null   float64\n",
            "dtypes: float64(6), int64(5), object(4)\n",
            "memory usage: 140.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IudsfhuC9GAe",
        "outputId": "5882a1d4-9bff-4e16-bb38-c3b7896ef816"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "date                       0\n",
              "quarter                    0\n",
              "department                 0\n",
              "day                        0\n",
              "team                       0\n",
              "targeted_productivity      0\n",
              "smv                        0\n",
              "wip                      506\n",
              "over_time                  0\n",
              "incentive                  0\n",
              "idle_time                  0\n",
              "idle_men                   0\n",
              "no_of_style_change         0\n",
              "no_of_workers              0\n",
              "actual_productivity        0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['department'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4M4Vn59jzJKS",
        "outputId": "973d9c2a-79cf-46b9-8d49-0cd214d7f825"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sweing        691\n",
              "finishing     257\n",
              "finishing     249\n",
              "Name: department, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['day'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cbff91a-98d3-425e-d3ed-4518208b6650",
        "id": "ftlhgf149WkQ"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Wednesday    208\n",
              "Sunday       203\n",
              "Tuesday      201\n",
              "Thursday     199\n",
              "Monday       199\n",
              "Saturday     187\n",
              "Name: day, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.department.unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pNMQ9d7hD2uz",
        "outputId": "f4abf194-17ce-41ce-b083-f8d0a860b3b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['sweing', 'finishing ', 'finishing'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"department\"].replace('finishing ','finishing',inplace=True)"
      ],
      "metadata": {
        "id": "h3pXaZ5AD70n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.department.unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9elZm1fhEEh5",
        "outputId": "1218323f-13db-42f1-908a-3849078af8b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['sweing', 'finishing'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['quarter'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "66978406-d88b-4a74-c2ae-9cb10c7c8917",
        "id": "q0zTO00O9mWo"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Quarter1    360\n",
              "Quarter2    335\n",
              "Quarter4    248\n",
              "Quarter3    210\n",
              "Quarter5     44\n",
              "Name: quarter, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['team'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6b698220-8bcb-481f-cc0f-0e089b302b29",
        "id": "phpE5Y629tg_"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8     109\n",
              "2     109\n",
              "1     105\n",
              "4     105\n",
              "9     104\n",
              "10    100\n",
              "12     99\n",
              "7      96\n",
              "3      95\n",
              "6      94\n",
              "5      93\n",
              "11     88\n",
              "Name: team, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['wip'].fillna(0,inplace=True)"
      ],
      "metadata": {
        "id": "2O2P9YLQ919e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"department\"].replace('sweing','sewing',inplace=True)"
      ],
      "metadata": {
        "id": "0kJUHfamEw5L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "t_vs_a = ['targeted_productivity', 'actual_productivity']\n",
        "data[t_vs_a].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "jcq7QOEkcN-D",
        "outputId": "dab38e4e-49ed-4803-b038-ba4130d68ae3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       targeted_productivity  actual_productivity\n",
              "count            1197.000000          1197.000000\n",
              "mean                0.729632             0.735091\n",
              "std                 0.097891             0.174488\n",
              "min                 0.070000             0.233705\n",
              "25%                 0.700000             0.650307\n",
              "50%                 0.750000             0.773333\n",
              "75%                 0.800000             0.850253\n",
              "max                 0.800000             1.120437"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-15bd361b-7f7d-4ddb-92ec-3a8965a5955f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>targeted_productivity</th>\n",
              "      <th>actual_productivity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1197.000000</td>\n",
              "      <td>1197.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.729632</td>\n",
              "      <td>0.735091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.097891</td>\n",
              "      <td>0.174488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.070000</td>\n",
              "      <td>0.233705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.650307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.750000</td>\n",
              "      <td>0.773333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>0.850253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.120437</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15bd361b-7f7d-4ddb-92ec-3a8965a5955f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-15bd361b-7f7d-4ddb-92ec-3a8965a5955f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-15bd361b-7f7d-4ddb-92ec-3a8965a5955f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(data=data[['targeted_productivity', 'actual_productivity']], element='poly')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "8fHKFNVccpMb",
        "outputId": "ad33e8fb-70c2-4041-b9b1-fbe290fdd772"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.iloc[:, 1:5].apply(pd.Series.value_counts).plot.pie(subplots=True, layout=(2, 5), figsize=(20, 10), sharex = False, legend = False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "7uz0SvuZc1Vd",
        "outputId": "4c8ca4a8-3f48-4524-db97-629f5ed30cac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7ff00ecc4b10>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00ec33490>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00ebe8950>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00eb9ee50>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00eb62390>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7ff00eb16890>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00eacde10>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00ea93290>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00ea932d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff00eac88d0>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 69
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 10 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "I_s5GNuG4ttG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "outputId": "b298fe79-7adf-4bd0-9f0f-17792f665958",
        "id": "W0ArFxAo4uWi"
      },
      "source": [
        "sns.barplot(x='department', y='actual_productivity', data=data);"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bXohO2ib47h2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cHeTvKLhg2cR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "708c78de-e134-4b72-94b5-8bb8be176706",
        "id": "UO2v73wW499k"
      },
      "source": [
        "sns.barplot(x='team', y='actual_productivity', data=data);"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pIdfAoQ6yV3_"
      },
      "source": [
        "c = data.groupby('quarter')['quarter'].count()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "c"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lszkDAtnhFhf",
        "outputId": "0f419780-71ab-45a2-bf8a-faf6139aead7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "quarter\n",
              "Quarter1    360\n",
              "Quarter2    335\n",
              "Quarter3    210\n",
              "Quarter4    248\n",
              "Quarter5     44\n",
              "Name: quarter, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9uPxWIMOhJ8d"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v3i59_Ej1nHP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "2aed37c6-d5b2-4f7a-c5a3-eb9c29769895"
      },
      "source": [
        "sns.barplot(x=c.index, y=c.values)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff00e70cf10>"
            ]
          },
          "metadata": {},
          "execution_count": 74
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "i_vs_a = ['incentive', 'actual_productivity']\n",
        "data[i_vs_a].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "631a6d8f-b0e9-4675-94b8-bf1e3da06766",
        "id": "6Qy821AhdAuR"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         incentive  actual_productivity\n",
              "count  1197.000000          1197.000000\n",
              "mean     38.210526             0.735091\n",
              "std     160.182643             0.174488\n",
              "min       0.000000             0.233705\n",
              "25%       0.000000             0.650307\n",
              "50%       0.000000             0.773333\n",
              "75%      50.000000             0.850253\n",
              "max    3600.000000             1.120437"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-76d7f633-247d-4699-85b8-95bb5d576666\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>incentive</th>\n",
              "      <th>actual_productivity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1197.000000</td>\n",
              "      <td>1197.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>38.210526</td>\n",
              "      <td>0.735091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>160.182643</td>\n",
              "      <td>0.174488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.233705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.650307</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.773333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>0.850253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3600.000000</td>\n",
              "      <td>1.120437</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76d7f633-247d-4699-85b8-95bb5d576666')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-76d7f633-247d-4699-85b8-95bb5d576666 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-76d7f633-247d-4699-85b8-95bb5d576666');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JX0tbmQPdMJR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(x='incentive',y='actual_productivity',data=data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "3203d551-0c2f-4fa3-f868-4b0ca845b652",
        "id": "hXBCSHZDdTmE"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff00e69ee10>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(x='day',y='actual_productivity',data=data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "4_vVWW0cbYok",
        "outputId": "0d13ce0a-60c9-4617-8c12-8915bf2b17a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff00e4afcd0>"
            ]
          },
          "metadata": {},
          "execution_count": 77
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"quarter\"].replace('Quarter1',0,inplace=True)\n",
        "data[\"quarter\"].replace('Quarter2',0,inplace=True)\n",
        "data[\"quarter\"].replace('Quarter3',0,inplace=True)\n",
        "data[\"quarter\"].replace('Quarter4',1,inplace=True)\n",
        "data[\"quarter\"].replace('Quarter5',1,inplace=True)"
      ],
      "metadata": {
        "id": "PnehVFwuFSSh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data[\"day\"].replace('Monday',0,inplace=True)\n",
        "data[\"day\"].replace('Tuesday',0,inplace=True)\n",
        "data[\"day\"].replace('Wednesday',0,inplace=True)\n",
        "data[\"day\"].replace('Thursday',0,inplace=True)\n",
        "data[\"day\"].replace('Sunday',1,inplace=True)\n",
        "data[\"day\"].replace('Saturday',1,inplace=True)"
      ],
      "metadata": {
        "id": "F1h9mVVHFd0C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop(['date'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "uFXejgXwF0Qt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "V7FWBPT3ZZPm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bza4grSRGEtB",
        "outputId": "e0c36631-81aa-4216-cc76-6a3b0ad5220c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1197 entries, 0 to 1196\n",
            "Data columns (total 14 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   quarter                1197 non-null   int64  \n",
            " 1   department             1197 non-null   object \n",
            " 2   day                    1197 non-null   int64  \n",
            " 3   team                   1197 non-null   int64  \n",
            " 4   targeted_productivity  1197 non-null   float64\n",
            " 5   smv                    1197 non-null   float64\n",
            " 6   wip                    1197 non-null   float64\n",
            " 7   over_time              1197 non-null   int64  \n",
            " 8   incentive              1197 non-null   int64  \n",
            " 9   idle_time              1197 non-null   float64\n",
            " 10  idle_men               1197 non-null   int64  \n",
            " 11  no_of_style_change     1197 non-null   int64  \n",
            " 12  no_of_workers          1197 non-null   float64\n",
            " 13  actual_productivity    1197 non-null   float64\n",
            "dtypes: float64(6), int64(7), object(1)\n",
            "memory usage: 131.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,10))\n",
        "p = sns.boxplot(data = data,orient = 'v',width=0.8)\n",
        "plt.xticks(rotation=90)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 724
        },
        "id": "YzqRGIaLGIU-",
        "outputId": "f45a24b5-fde4-4318-f748-c590bea0712b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),\n",
              " <a list of 13 Text major ticklabel objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 82
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1 = data.incentive.quantile(0.25)\n",
        "Q3 = data.incentive.quantile(0.75)\n",
        "Q1, Q3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "spQ6ZdLHGnlN",
        "outputId": "6ba9177f-71cf-4677-f780-2d2ca84111a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.0, 50.0)"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Inter_quartile_range = Q3 - Q1\n",
        "Inter_quartile_range"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UCBrP-O-GtVp",
        "outputId": "68a4e97c-1b29-4bf6-cf28-0280ea610386"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "50.0"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lower_limit = Q1 - 1.5*Inter_quartile_range\n",
        "upper_limit = Q3 + 1.5*Inter_quartile_range\n",
        "lower_limit,upper_limit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zad986EjGwUl",
        "outputId": "bdf7b853-0e35-4cbf-dfb4-07a9651fea53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-75.0, 125.0)"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data[(data.incentive<lower_limit)|(data.incentive>upper_limit)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "7jlveBH1Gzoz",
        "outputId": "ff16c469-f0cb-4e43-8c28-7099ccc1723b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      quarter department  day  team  targeted_productivity    smv     wip  \\\n",
              "730         0     sewing    0     1                   0.80  22.52  1397.0   \n",
              "1128        0  finishing    0    11                   0.80   2.90     0.0   \n",
              "1129        0  finishing    0    12                   0.80   4.60     0.0   \n",
              "1130        0  finishing    0     5                   0.60   3.94     0.0   \n",
              "1133        0  finishing    0     9                   0.75   2.90     0.0   \n",
              "1137        0  finishing    0     3                   0.80   4.60     0.0   \n",
              "1138        0  finishing    0     4                   0.75   3.94     0.0   \n",
              "1139        0  finishing    0     1                   0.75   3.94     0.0   \n",
              "1143        0  finishing    0     2                   0.70   3.90     0.0   \n",
              "1148        0  finishing    0    10                   0.70   2.90     0.0   \n",
              "1149        0  finishing    0     8                   0.65   3.90     0.0   \n",
              "\n",
              "      over_time  incentive  idle_time  idle_men  no_of_style_change  \\\n",
              "730           0        138        0.0         0                   0   \n",
              "1128          0        960        0.0         0                   0   \n",
              "1129          0       1080        0.0         0                   0   \n",
              "1130          0       2880        0.0         0                   0   \n",
              "1133          0       3600        0.0         0                   0   \n",
              "1137          0       1440        0.0         0                   0   \n",
              "1138          0        960        0.0         0                   0   \n",
              "1139          0        960        0.0         0                   0   \n",
              "1143          0       1200        0.0         0                   0   \n",
              "1148          0        960        0.0         0                   0   \n",
              "1149          0        960        0.0         0                   0   \n",
              "\n",
              "      no_of_workers  actual_productivity  \n",
              "730            57.0             1.100484  \n",
              "1128            8.0             0.960625  \n",
              "1129            9.0             0.902963  \n",
              "1130           12.0             0.864343  \n",
              "1133           15.0             0.841000  \n",
              "1137           12.0             0.795417  \n",
              "1138            8.0             0.795388  \n",
              "1139            8.0             0.794567  \n",
              "1143           10.0             0.682500  \n",
              "1148            8.0             0.477292  \n",
              "1149            8.0             0.264062  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6737e303-5aa4-4f2c-a1c6-8942ebd24d11\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>quarter</th>\n",
              "      <th>department</th>\n",
              "      <th>day</th>\n",
              "      <th>team</th>\n",
              "      <th>targeted_productivity</th>\n",
              "      <th>smv</th>\n",
              "      <th>wip</th>\n",
              "      <th>over_time</th>\n",
              "      <th>incentive</th>\n",
              "      <th>idle_time</th>\n",
              "      <th>idle_men</th>\n",
              "      <th>no_of_style_change</th>\n",
              "      <th>no_of_workers</th>\n",
              "      <th>actual_productivity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>730</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.80</td>\n",
              "      <td>22.52</td>\n",
              "      <td>1397.0</td>\n",
              "      <td>0</td>\n",
              "      <td>138</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>57.0</td>\n",
              "      <td>1.100484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1128</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>0.80</td>\n",
              "      <td>2.90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>960</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.960625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1129</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>0.80</td>\n",
              "      <td>4.60</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1080</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0.902963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1130</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>0.60</td>\n",
              "      <td>3.94</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2880</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0.864343</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1133</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2.90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3600</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>0.841000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1137</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0.80</td>\n",
              "      <td>4.60</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1440</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0.795417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0.75</td>\n",
              "      <td>3.94</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>960</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.795388</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.75</td>\n",
              "      <td>3.94</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>960</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.794567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.70</td>\n",
              "      <td>3.90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1200</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.682500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1148</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0.70</td>\n",
              "      <td>2.90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>960</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.477292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1149</th>\n",
              "      <td>0</td>\n",
              "      <td>finishing</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0.65</td>\n",
              "      <td>3.90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>960</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.264062</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6737e303-5aa4-4f2c-a1c6-8942ebd24d11')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6737e303-5aa4-4f2c-a1c6-8942ebd24d11 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6737e303-5aa4-4f2c-a1c6-8942ebd24d11');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datai = data[(data.incentive>lower_limit)&(data.incentive<upper_limit)]"
      ],
      "metadata": {
        "id": "IhXt-3_NG6jI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datai.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XBlPRPjyG73Y",
        "outputId": "ed780921-0fba-40f9-a7d8-79f475437683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1186, 14)"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1 = datai.over_time.quantile(0.25)\n",
        "Q3 = datai.over_time.quantile(0.75)\n",
        "Q1 , Q3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_8RAzieaHBLS",
        "outputId": "ef126ef1-b322-45c3-8a4e-6b30a534f859"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1440.0, 6960.0)"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Inter_quartile_range = Q3 - Q1\n",
        "Inter_quartile_range"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "05F2u1YuHFvI",
        "outputId": "000b3e18-85fb-44b9-a195-89bf44510087"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5520.0"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lower_limit = Q1 - 1.5*Inter_quartile_range\n",
        "upper_limit = Q3 + 1.5*Inter_quartile_range\n",
        "lower_limit,upper_limit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SzP4HHHgHJU1",
        "outputId": "23734319-b5fc-40bf-b9c9-8bdc5766913a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-6840.0, 15240.0)"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datai[(datai.over_time<lower_limit)|(datai.over_time>upper_limit)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "r1DBwzcmHMXV",
        "outputId": "928fce52-ef23-4f23-d4bd-110be6003d94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     quarter department  day  team  targeted_productivity    smv    wip  \\\n",
              "146        0     sewing    0    11                   0.35  12.52  287.0   \n",
              "\n",
              "     over_time  incentive  idle_time  idle_men  no_of_style_change  \\\n",
              "146      25920         38        0.0         0                   0   \n",
              "\n",
              "     no_of_workers  actual_productivity  \n",
              "146           54.0             0.349951  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b52be5a-2f12-4781-8585-3f0af509d2bf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>quarter</th>\n",
              "      <th>department</th>\n",
              "      <th>day</th>\n",
              "      <th>team</th>\n",
              "      <th>targeted_productivity</th>\n",
              "      <th>smv</th>\n",
              "      <th>wip</th>\n",
              "      <th>over_time</th>\n",
              "      <th>incentive</th>\n",
              "      <th>idle_time</th>\n",
              "      <th>idle_men</th>\n",
              "      <th>no_of_style_change</th>\n",
              "      <th>no_of_workers</th>\n",
              "      <th>actual_productivity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>0.35</td>\n",
              "      <td>12.52</td>\n",
              "      <td>287.0</td>\n",
              "      <td>25920</td>\n",
              "      <td>38</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.349951</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b52be5a-2f12-4781-8585-3f0af509d2bf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7b52be5a-2f12-4781-8585-3f0af509d2bf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7b52be5a-2f12-4781-8585-3f0af509d2bf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datao = datai[(datai.over_time>lower_limit)&(datai.over_time<upper_limit)]"
      ],
      "metadata": {
        "id": "Uhetf8NnHPfU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datao.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R1LHIw9BHSyb",
        "outputId": "092166c9-89fa-4d63-d363-44a58cae3027"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1185, 14)"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1 = datao.wip.quantile(0.25)\n",
        "Q3 = datao.wip.quantile(0.75)\n",
        "Q1 , Q3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2165648f-ccf6-441c-b43c-67687d5987bc",
        "id": "aloplv-NHjxy"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.0, 1085.0)"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "l8nJ4KVQHvLQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Inter_quartile_range = Q3 - Q1\n",
        "Inter_quartile_range"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f5e756a8-da81-42d3-a048-fd384ce96930",
        "id": "-XXP1nDEHxer"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1085.0"
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "N3fTwTNOHyit"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lower_limit = Q1 - 1.5*Inter_quartile_range\n",
        "upper_limit = Q3 + 1.5*Inter_quartile_range\n",
        "lower_limit,upper_limit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "550a1b09-af08-4f6e-d880-bbb94801567b",
        "id": "R-THHr2qH2dC"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-1627.5, 2712.5)"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "yH3N085UH3dW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "datao[(datao.wip<lower_limit)|(datao.wip>upper_limit)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "outputId": "48eba68f-0133-486f-9e2d-098537a28181",
        "id": "EjzBjnyxH6Kj"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     quarter department  day  team  targeted_productivity    smv      wip  \\\n",
              "561        0     sewing    0     1                   0.80  22.94  16882.0   \n",
              "563        0     sewing    0     2                   0.80  22.52  21385.0   \n",
              "564        0     sewing    0     3                   0.80  22.52  21266.0   \n",
              "565        0     sewing    0    10                   0.80  22.52  21540.0   \n",
              "568        0     sewing    0    12                   0.80  15.26  12261.0   \n",
              "569        0     sewing    0     4                   0.80  22.52  23122.0   \n",
              "570        0     sewing    0     9                   0.75  29.12   8992.0   \n",
              "572        0     sewing    0    11                   0.70  20.55   9792.0   \n",
              "573        0     sewing    0     6                   0.70  18.79   2984.0   \n",
              "\n",
              "     over_time  incentive  idle_time  idle_men  no_of_style_change  \\\n",
              "561       7020        113        0.0         0                   0   \n",
              "563       7020         88        0.0         0                   0   \n",
              "564       6840         70        0.0         0                   0   \n",
              "565       6720         88        0.0         0                   0   \n",
              "568       3600         63        0.0         0                   0   \n",
              "569       5940         50        0.0         0                   0   \n",
              "570       6960         55        0.0         0                   0   \n",
              "572       6480         60        0.0         0                   0   \n",
              "573       3960         30        0.0         0                   0   \n",
              "\n",
              "     no_of_workers  actual_productivity  \n",
              "561           58.5             1.000602  \n",
              "563           58.5             0.900158  \n",
              "564           57.0             0.900142  \n",
              "565           56.0             0.900130  \n",
              "568           35.0             0.800402  \n",
              "569           56.5             0.800393  \n",
              "570           58.0             0.799963  \n",
              "572           54.0             0.700398  \n",
              "573           33.0             0.700355  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d7f04860-1267-4770-a70f-eae47061bb94\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>quarter</th>\n",
              "      <th>department</th>\n",
              "      <th>day</th>\n",
              "      <th>team</th>\n",
              "      <th>targeted_productivity</th>\n",
              "      <th>smv</th>\n",
              "      <th>wip</th>\n",
              "      <th>over_time</th>\n",
              "      <th>incentive</th>\n",
              "      <th>idle_time</th>\n",
              "      <th>idle_men</th>\n",
              "      <th>no_of_style_change</th>\n",
              "      <th>no_of_workers</th>\n",
              "      <th>actual_productivity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>561</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.80</td>\n",
              "      <td>22.94</td>\n",
              "      <td>16882.0</td>\n",
              "      <td>7020</td>\n",
              "      <td>113</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>58.5</td>\n",
              "      <td>1.000602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>563</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.80</td>\n",
              "      <td>22.52</td>\n",
              "      <td>21385.0</td>\n",
              "      <td>7020</td>\n",
              "      <td>88</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>58.5</td>\n",
              "      <td>0.900158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>564</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0.80</td>\n",
              "      <td>22.52</td>\n",
              "      <td>21266.0</td>\n",
              "      <td>6840</td>\n",
              "      <td>70</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>57.0</td>\n",
              "      <td>0.900142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>565</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0.80</td>\n",
              "      <td>22.52</td>\n",
              "      <td>21540.0</td>\n",
              "      <td>6720</td>\n",
              "      <td>88</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>0.900130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>568</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>0.80</td>\n",
              "      <td>15.26</td>\n",
              "      <td>12261.0</td>\n",
              "      <td>3600</td>\n",
              "      <td>63</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0.800402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>569</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0.80</td>\n",
              "      <td>22.52</td>\n",
              "      <td>23122.0</td>\n",
              "      <td>5940</td>\n",
              "      <td>50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56.5</td>\n",
              "      <td>0.800393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>570</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>0.75</td>\n",
              "      <td>29.12</td>\n",
              "      <td>8992.0</td>\n",
              "      <td>6960</td>\n",
              "      <td>55</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.799963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>572</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>0.70</td>\n",
              "      <td>20.55</td>\n",
              "      <td>9792.0</td>\n",
              "      <td>6480</td>\n",
              "      <td>60</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.700398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>573</th>\n",
              "      <td>0</td>\n",
              "      <td>sewing</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0.70</td>\n",
              "      <td>18.79</td>\n",
              "      <td>2984.0</td>\n",
              "      <td>3960</td>\n",
              "      <td>30</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>0.700355</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7f04860-1267-4770-a70f-eae47061bb94')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d7f04860-1267-4770-a70f-eae47061bb94 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d7f04860-1267-4770-a70f-eae47061bb94');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Za7qqAUwIDj7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataw = datao[(datao.wip>lower_limit)&(datao.wip<upper_limit)]"
      ],
      "metadata": {
        "id": "i4C7Q9lTIISL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,7))\n",
        "p = sns.boxplot(data = dataw, orient = 'v',width=0.8)\n",
        "plt.xticks(rotation=90)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "id": "1CxD8j4yIQmF",
        "outputId": "1954fb5b-2f33-4900-cf7c-dd582491d5c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),\n",
              " <a list of 13 Text major ticklabel objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 100
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EDA"
      ],
      "metadata": {
        "id": "Y8-LX0RdZdys"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gtfvE2BbK_nA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9imBYdspA5W8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "d4cb9bff-60a2-4666-9a1f-2464355fe7d0"
      },
      "source": [
        "sns.barplot(x='day',y='over_time',data=data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff00e0f5150>"
            ]
          },
          "metadata": {},
          "execution_count": 102
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xdYyDPpB3ell"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "947ce4be-4d8b-426c-9ca7-77c0003c8672",
        "id": "XM0_AHAl3g0m"
      },
      "source": [
        "sns.barplot(x='day',y='idle_time',data=data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff00e4f7210>"
            ]
          },
          "metadata": {},
          "execution_count": 103
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Tg5ZhXQ93uQ-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "53plWtKK3mEk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(dataw,x_vars=['quarter','department','team','smv','over_time','incentive','no_of_workers'],y_vars='actual_productivity',size=5,kind='reg')"
      ],
      "metadata": {
        "id": "iDqp_0dlOiUR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "outputId": "688f4a85-53ee-45ae-8621-d97321810e78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "UFuncTypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mUFuncTypeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-106-b0bcd860da1a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpairplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataw\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx_vars\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'quarter'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'department'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'team'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'smv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'over_time'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'incentive'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'no_of_workers'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_vars\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'actual_productivity'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'reg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36mpairplot\u001b[0;34m(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\u001b[0m\n\u001b[1;32m   2141\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mkind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"reg\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2142\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mregression\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mregplot\u001b[0m  \u001b[0;31m# Avoid circular import\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2143\u001b[0;31m         \u001b[0mplotter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mregplot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mplot_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2144\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mkind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"kde\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2145\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mdistributions\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mkdeplot\u001b[0m  \u001b[0;31m# Avoid circular import\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36mmap_offdiag\u001b[0;34m(self, func, **kwargs)\u001b[0m\n\u001b[1;32m   1394\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mx_var\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my_var\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m                         \u001b[0mindices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1396\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_map_bivariate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1397\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1398\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36m_map_bivariate\u001b[0;34m(self, func, indices, **kwargs)\u001b[0m\n\u001b[1;32m   1537\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0max\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# i.e. we are in corner mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1538\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1539\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_bivariate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_var\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_var\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1540\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_add_axis_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36m_plot_bivariate\u001b[0;34m(self, x_var, y_var, ax, func, **kwargs)\u001b[0m\n\u001b[1;32m   1546\u001b[0m         \u001b[0;34m\"\"\"Draw a bivariate plot on the specified axes.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1547\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m\"hue\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1548\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_bivariate_iter_hue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_var\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_var\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1549\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36m_plot_bivariate_iter_hue\u001b[0;34m(self, x_var, y_var, ax, func, **kwargs)\u001b[0m\n\u001b[1;32m   1619\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1620\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__module__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"seaborn\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1621\u001b[0;31m                 \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1622\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1623\u001b[0m                 \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/regression.py\u001b[0m in \u001b[0;36mregplot\u001b[0;34m(x, y, data, x_estimator, x_bins, x_ci, scatter, fit_reg, ci, n_boot, units, seed, order, logistic, lowess, robust, logx, x_partial, y_partial, truncate, dropna, x_jitter, y_jitter, label, color, marker, scatter_kws, line_kws, ax)\u001b[0m\n\u001b[1;32m    861\u001b[0m     \u001b[0mscatter_kws\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"marker\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m     \u001b[0mline_kws\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mline_kws\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m     \u001b[0mplotter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscatter_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    864\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/regression.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, ax, scatter_kws, line_kws)\u001b[0m\n\u001b[1;32m    368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_reg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 370\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlineplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    372\u001b[0m         \u001b[0;31m# Label the axes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/regression.py\u001b[0m in \u001b[0;36mlineplot\u001b[0;34m(self, ax, kws)\u001b[0m\n\u001b[1;32m    411\u001b[0m         \u001b[0;34m\"\"\"Draw the model.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    412\u001b[0m         \u001b[0;31m# Fit the regression model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 413\u001b[0;31m         \u001b[0mgrid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myhat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr_bands\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_regression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    414\u001b[0m         \u001b[0medges\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/regression.py\u001b[0m in \u001b[0;36mfit_regression\u001b[0;34m(self, ax, x_range, grid)\u001b[0m\n\u001b[1;32m    199\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    200\u001b[0m                     \u001b[0mx_min\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_xlim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m             \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_min\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m         \u001b[0mci\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mci\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mlinspace\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/core/function_base.py\u001b[0m in \u001b[0;36mlinspace\u001b[0;34m(start, stop, num, endpoint, retstep, dtype, axis)\u001b[0m\n\u001b[1;32m    125\u001b[0m     \u001b[0;31m# Convert float/complex array scalars to float, gh-3504\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m     \u001b[0;31m# and make sure one can use variables that have an __array_interface__, gh-6634\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m     \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m     \u001b[0mstop\u001b[0m  \u001b[0;34m=\u001b[0m \u001b[0masanyarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;34m*\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mUFuncTypeError\u001b[0m: ufunc 'multiply' did not contain a loop with signature matching types (dtype('<U9'), dtype('float64')) -> None"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2520x360 with 7 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cZtxBJ_zLS_2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "corr_data=dataw.iloc[:,:].corr()\n",
        "plt.figure(figsize=(10,5),dpi=96)\n",
        "sns.heatmap(data = corr_data,annot = True,cmap = 'coolwarm')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "SOg4cnTcPCXQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        },
        "outputId": "6bd808a6-dd27-4c4a-86de-a0cdc0e6ba6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 960x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.formula.api as smf"
      ],
      "metadata": {
        "id": "szzOV37jUVHv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lm = smf.ols(formula='actual_productivity~ department + no_of_workers + over_time  +incentive  + day + idle_time +team + smv + targeted_productivity + idle_men +  no_of_style_change',data=dataw).fit()"
      ],
      "metadata": {
        "id": "fhwDF_k3TSA8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lm.params"
      ],
      "metadata": {
        "id": "nl8MhvGQU-Px",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f74095c8-da26-4548-ad97-362df3bf98bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Intercept                0.442695\n",
              "department[T.sewing]    -0.179756\n",
              "no_of_workers            0.002931\n",
              "over_time               -0.000004\n",
              "incentive                0.003251\n",
              "day                      0.002506\n",
              "idle_time                0.000550\n",
              "team                    -0.005768\n",
              "smv                     -0.004470\n",
              "targeted_productivity    0.463839\n",
              "idle_men                -0.005913\n",
              "no_of_style_change      -0.007119\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=dataw.drop(['actual_productivity','department'],axis=1)"
      ],
      "metadata": {
        "id": "wJ59Pq4_Lote"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y=dataw.actual_productivity"
      ],
      "metadata": {
        "id": "yFtj8iH7MO91"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "bXBMabpGMr-d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=1)"
      ],
      "metadata": {
        "id": "YTqg7EDHMUKU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lm1=LinearRegression()"
      ],
      "metadata": {
        "id": "43oPhbBUM3_c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics"
      ],
      "metadata": {
        "id": "tq5go0ieNWDL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lm1.fit(x_train, y_train)\n",
        "y_pred = lm1.predict(x_test)\n",
        "print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"
      ],
      "metadata": {
        "id": "YdH664C1M_sa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aca0c2d9-423f-45e6-d99c-ee1c80b0bef1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.14241856359525532\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lm1.score(x,y)"
      ],
      "metadata": {
        "id": "KKfPemOiNzs5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ab23aa94-9636-4d7f-c2ab-0030e5193856"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.3607953050951418"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lm.rsquared"
      ],
      "metadata": {
        "id": "lEJ-nM54S7oU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d10568f1-27f4-4f13-d11a-0617f30933fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.38124265039842753"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lm.summary()"
      ],
      "metadata": {
        "id": "jHlNS3WdVW__",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 688
        },
        "outputId": "5a83a5e4-0783-4d02-e697-4a57a0ff855e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                             OLS Regression Results                            \n",
              "===============================================================================\n",
              "Dep. Variable:     actual_productivity   R-squared:                       0.381\n",
              "Model:                             OLS   Adj. R-squared:                  0.375\n",
              "Method:                  Least Squares   F-statistic:                     65.20\n",
              "Date:                 Mon, 29 Aug 2022   Prob (F-statistic):          3.30e-113\n",
              "Time:                         12:53:02   Log-Likelihood:                 670.89\n",
              "No. Observations:                 1176   AIC:                            -1318.\n",
              "Df Residuals:                     1164   BIC:                            -1257.\n",
              "Df Model:                           11                                         \n",
              "Covariance Type:             nonrobust                                         \n",
              "=========================================================================================\n",
              "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
              "-----------------------------------------------------------------------------------------\n",
              "Intercept                 0.4427      0.036     12.413      0.000       0.373       0.513\n",
              "department[T.sewing]     -0.1798      0.027     -6.702      0.000      -0.232      -0.127\n",
              "no_of_workers             0.0029      0.001      4.201      0.000       0.002       0.004\n",
              "over_time             -4.482e-06   1.93e-06     -2.319      0.021   -8.27e-06   -6.91e-07\n",
              "incentive                 0.0033      0.000     14.202      0.000       0.003       0.004\n",
              "day                       0.0025      0.009      0.293      0.769      -0.014       0.019\n",
              "idle_time                 0.0005      0.000      1.443      0.149      -0.000       0.001\n",
              "team                     -0.0058      0.001     -4.617      0.000      -0.008      -0.003\n",
              "smv                      -0.0045      0.001     -4.826      0.000      -0.006      -0.003\n",
              "targeted_productivity     0.4638      0.045     10.224      0.000       0.375       0.553\n",
              "idle_men                 -0.0059      0.002     -3.899      0.000      -0.009      -0.003\n",
              "no_of_style_change       -0.0071      0.011     -0.647      0.518      -0.029       0.014\n",
              "==============================================================================\n",
              "Omnibus:                      174.468   Durbin-Watson:                   1.267\n",
              "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              351.796\n",
              "Skew:                          -0.878   Prob(JB):                     4.06e-77\n",
              "Kurtosis:                       5.023   Cond. No.                     7.98e+04\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "[2] The condition number is large, 7.98e+04. This might indicate that there are\n",
              "strong multicollinearity or other numerical problems.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>    <td>actual_productivity</td> <th>  R-squared:         </th> <td>   0.381</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                    <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>   0.375</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>              <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   65.20</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>              <td>Mon, 29 Aug 2022</td>   <th>  Prob (F-statistic):</th> <td>3.30e-113</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                  <td>12:53:02</td>       <th>  Log-Likelihood:    </th> <td>  670.89</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>       <td>  1176</td>        <th>  AIC:               </th> <td>  -1318.</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>           <td>  1164</td>        <th>  BIC:               </th> <td>  -1257.</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>               <td>    11</td>        <th>                     </th>     <td> </td>    \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>       <td>nonrobust</td>      <th>                     </th>     <td> </td>    \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "            <td></td>               <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Intercept</th>             <td>    0.4427</td> <td>    0.036</td> <td>   12.413</td> <td> 0.000</td> <td>    0.373</td> <td>    0.513</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>department[T.sewing]</th>  <td>   -0.1798</td> <td>    0.027</td> <td>   -6.702</td> <td> 0.000</td> <td>   -0.232</td> <td>   -0.127</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>no_of_workers</th>         <td>    0.0029</td> <td>    0.001</td> <td>    4.201</td> <td> 0.000</td> <td>    0.002</td> <td>    0.004</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>over_time</th>             <td>-4.482e-06</td> <td> 1.93e-06</td> <td>   -2.319</td> <td> 0.021</td> <td>-8.27e-06</td> <td>-6.91e-07</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>incentive</th>             <td>    0.0033</td> <td>    0.000</td> <td>   14.202</td> <td> 0.000</td> <td>    0.003</td> <td>    0.004</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>day</th>                   <td>    0.0025</td> <td>    0.009</td> <td>    0.293</td> <td> 0.769</td> <td>   -0.014</td> <td>    0.019</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>idle_time</th>             <td>    0.0005</td> <td>    0.000</td> <td>    1.443</td> <td> 0.149</td> <td>   -0.000</td> <td>    0.001</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>team</th>                  <td>   -0.0058</td> <td>    0.001</td> <td>   -4.617</td> <td> 0.000</td> <td>   -0.008</td> <td>   -0.003</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>smv</th>                   <td>   -0.0045</td> <td>    0.001</td> <td>   -4.826</td> <td> 0.000</td> <td>   -0.006</td> <td>   -0.003</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>targeted_productivity</th> <td>    0.4638</td> <td>    0.045</td> <td>   10.224</td> <td> 0.000</td> <td>    0.375</td> <td>    0.553</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>idle_men</th>              <td>   -0.0059</td> <td>    0.002</td> <td>   -3.899</td> <td> 0.000</td> <td>   -0.009</td> <td>   -0.003</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>no_of_style_change</th>    <td>   -0.0071</td> <td>    0.011</td> <td>   -0.647</td> <td> 0.518</td> <td>   -0.029</td> <td>    0.014</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>174.468</td> <th>  Durbin-Watson:     </th> <td>   1.267</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td> 351.796</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td>-0.878</td>  <th>  Prob(JB):          </th> <td>4.06e-77</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 5.023</td>  <th>  Cond. No.          </th> <td>7.98e+04</td>\n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 7.98e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_axis = data['team'].unique()\n",
        "y_axis=[]\n",
        "for val in x_axis:\n",
        "    y_axis.append(data['over_time'][data['team'] == val].mean())\n",
        "sns.barplot(x=x_axis, y=y_axis)\n",
        "plt.title(\"Team and Overtime\")\n",
        "plt.xlabel('Team')\n",
        "plt.ylabel('Average Overtime')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "NlFsd4VHWRSB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "3a5393ff-4f9b-4097-e1dd-d32f5b7ecaa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2rT5s04sQeQJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}